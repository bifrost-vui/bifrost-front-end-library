{# Import macros #}
{% import "@bf-utils/macros/twig/index.twig" as macros %}

{# Boolean Variables #}
{% set hasId = id is defined and id is not empty %}

{# Default Variables #}
{% set class = class|default("") %}

{# Arrays of Classes With Dynamic Elements #}
{% set filtersClasses = [
  "bf-filters",
  (class),
] %}

{# Selected filter extraction for chips component #}


{# Template #}
<div {{ macros.addAttributes({
  "class": filtersClasses|join(' ')|trim,
  "id": (hasId ? id),
}) }}>

  {# My Selection #}
  <div class="bf-filters__selection">

    {% include "@bf-components/chip/twig/index.twig" with {
      class: "js-bf-filters-chip-template d-none",
      deleteButton: "removeFilter()",
      deleteButtonAriaLabel: "On a click, it will remove this filter.",
      id: "%chip-id%",
      isDisabled: true,
      label: "%chip-label%",
    } only %}

  </div>

  {# Filters Accordions #}
  <div class="bf-filters__accordions">

    {% for dataFilter in dataFilters %}

      {% set filterVars = {
        class: dataFilter.class,
        id: dataFilter.id,
        idParent: id,
        isDisabled: dataFilter.isDisabled|default(false),
        isExpandedByDefault: dataFilter.isExpandedByDefault|default(true),
        numberOfCheckboxesToDisplay: dataFilter.numberOfCheckboxesToDisplay,
        title: dataFilter.title,
      } %}

      {% if dataFilter.dataCheckboxes is defined and dataFilter.dataCheckboxes is not empty %}
        {% set filterVars = filterVars|merge([dataCheckboxes: dataFilter.dataCheckboxes]) %}
      {% elseif dataFilter.dataSlider is defined and dataFilter.dataSlider is not empty %}
        {% set filterVars = filterVars|merge([dataCheckboxes: dataFilter.dataCheckboxes]) %}
      {% endif %}

      {% embed "@bf-components/filter/twig/index.twig" with filterVars only %}
          {% block filterContentBlock %}
              <p>You can apply any type of content here using the Twig block:</p>
              <pre class="d-inline-block bf-color-neutral-primary bf-color-bg-underground p-2">filterContentBlock</pre>
          {% endblock %}
      {% endembed %}
    {% endfor %}

  </div>

</div>
