{# Import macros #}
{% import "@bf-utils/macros/twig/index.twig" as macros %}

{# Default Variables (Props, Controls) - Pre Boolean Variables #}
{% set labelTypography = labelTypography|default("display-sub-medium") %}

{# Boolean Variables #}
{% set hasAriaLabel = ariaLabel is defined and ariaLabel is not empty %}
{% set hasLabel = label is defined and label is not empty %}
{% set hasName = name is defined and name is not empty %}
{% set hasValue = value is defined and value is not empty %}
{% set isChecked = (isChecked ?? false) is same as(true) %}
{% set isDisabled = (isDisabled ?? false) is same as(true) %}
{% set isInvalid = (isInvalid ?? false) is same as(true) %}
{% set isRequired = (isRequired ?? false) is same as(true) %}
{% set isLabelTypographyParagraphDefault = labelTypography is same as("paragraph-default") %}
{% set isLabelTypographyDisplaySubMedium = labelTypography is same as("display-sub-medium") %}

{# Default Variables (Props, Controls) #}
{% set class = class|default("") %}
{% set extraAttribute = extraAttribute|default(null) %}
{% set id = id|default(inputId) %} {# inputId is Ui-Kit legacy #}
{% set labelClass = labelClass|default(null) %}
{% set labelExtraAttribute = labelExtraAttribute|default(null) %}
{% set name = name|default(inputName) %} {# inputName is Ui-Kit legacy #}

{# Arrays of Classes With Dynamic Elements #}
{% set containerClasses = [
  "bf-input-checkbox-option",
  (isInvalid ? "bf-input-checkbox-option--invalid"),
  (isDisabled ? "bf-input-checkbox-option--disabled"),
  (class),
] %}
{% set inputClasses = [
  "bf-input-checkbox-control",
  (isInvalid ? "bf-input-checkbox-control--invalid"),
] %}
{% set labelSecondSpanClasses = [
  (isLabelTypographyParagraphDefault ? "bf-text"),
  (isLabelTypographyDisplaySubMedium ? "bf-text-display-sub-medium"),
  (labelClass),
] %}

{# Template #}
<div class="{{ containerClasses|join(' ')|trim }}">
  <input {{ macros.addAttributes({
    "type": "checkbox",
    "class": (inputClasses|join(' ')|trim),
    "name": (hasName ? name),
    "id": (id),
    "value": (hasValue ? value),
    "checked": (isChecked ? "checked"),
    "disabled": (isDisabled ? "disabled"),
    "required": (isRequired ? "required"),
    "aria-label": (hasAriaLabel ? ariaLabel),
  }, extraAttribute) }} />
  {% if hasLabel %}
    <label for="{{ id }}">
      <span class="bf-checkbox__control"></span>
      <span {{ macros.addAttributes({
        "class": (labelSecondSpanClasses|join(' ')|trim),
      }, labelExtraAttribute) }}>
        {{ label|raw }}
      </span>
    </label>
  {% endif %}
</div>
