{# Import macros #}
{% import "@bf-utils/macros/twig/index.twig" as macros %}

{# Default Variables (Props, Controls) #}
{% set class = class|default("") %}
{% set step = step|default(1) %}
{% set minimumGap = minimumGap|default(1) %}
{% set unitPosition = unitPosition|default("end") %}

{# Boolean Variables #}
{% set hasMaxDescription = max.description is defined and max.description is not empty %}
{% set hasMaxLegend = max.legend is defined and max.legend is not empty %}
{% set hasMinDescription = min.description is defined and min.description is not empty %}
{% set hasMinLegend = min.legend is defined and min.legend is not empty %}
{% set hasUnitLabel = unitLabel is defined and unitLabel is not empty %}
{% set hasValue0 = value[0] is defined and value[0] is not empty %}
{% set hasValue1 = value[1] is defined and value[1] is not empty %}
{% set isInverted = isInverted|default(false) is same as(true) %}
{% set isReversed = reversed|default(false) is same as(true) %}
{% set isUnitPositionEnd = unitPosition is same as("end") %}
{% set isUnitPositionStart = unitPosition is same as("start") %}

{# Boolean Variables - ORDER IS IMPORTANT #}
{% set hasLegend = hasMinLegend or hasMaxLegend %}
{% set hasDescription = hasMinDescription or hasMaxDescription %}
{% set isRange = value is iterable and hasValue0 and hasValue1 %}

{# Arrays of Classes With Dynamic Elements #}
{% set sliderContainerClasses = [
  "bf-input-slider js-bf-input-slider",
  (isReversed ? "reversed"),
  (class),
] %}


{# Initialize with correct value for "value" variable when in "range" #}
{% if isRange %}
  {# Reorder value array in case of mistake: Smallest number should be at position 0. #}
  {% if value[0] > value[1] %}
    {% set value = [value[1], value[0]] %}
  {% endif %}

  {# Values should be between min and max. #}
  {% set value = [
    min(max(value[0], min.value), max.value),
    min(max(value[1], min.value), max.value)
  ] %}
{% else %}
  {# Value should be between min and max. #}
  {% set value = min(max(value, min.value), max.value) %}
{% endif %}

{# Template #}
<div {{ macros.addAttributes({
  "class": sliderContainerClasses|join(' ')|trim,
  "data-range": macros.boolToString(isRange),
  "data-minimum-gap": minimumGap,
  "data-inverted": (isRange is same as(false) ? macros.boolToString(isInverted))
}) }}>
  {% if isRange %}
    <div class="d-flex justify-content-between mx-2">
      <label for="{{ min.inputId }}">
        {% if hasUnitLabel and isUnitPositionStart %}
          {{ unitLabel }}
        {% endif %}
        <span class="bf-input-slider__label-min-value"></span>
        {% if hasUnitLabel and isUnitPositionEnd %}
          {{ unitLabel }}
        {% endif %}
      </label>
      <label for="{{ max.inputId }}">
        {% if hasUnitLabel and isUnitPositionStart %}
          {{ unitLabel }}
        {% endif %}
        <span class="bf-input-slider__label-max-value"></span>
        {% if hasUnitLabel and isUnitPositionEnd %}
          {{ unitLabel }}
        {% endif %}
      </label>
    </div>
  {% else %}
    <div class="bf-input-slider__handle-container position-relative mx-3">
      <div class="bf-input-slider__handle">
        <label {{ macros.addAttributes({
          "class": "bf-input-slider__label",
          "for": min.inputId|default(max.inputId),
        }) }}>
          {% if hasUnitLabel and isUnitPositionStart %}
            {{ unitLabel }}
          {% endif %}
          <span class="bf-input-slider__label__value"></span>
          {% if hasUnitLabel and isUnitPositionEnd %}
            {{ unitLabel }}
          {% endif %}
        </label>
      </div>
    </div>
  {% endif %}

  <div class="bf-input-slider__panel">
    <div class="bf-input-slider__overlay mx-2">
      <div class="bf-input-slider__track"></div>
      <div class="bf-input-slider__progress-track-container">
        <div class="bf-input-slider__progress-track"></div>
      </div>
    </div>

    {% if isRange %}
      <input {{ macros.addAttributes({
        "class": "bf-input-slider__input bf-input-slider__input__min",
        "type": "range",
        "max": max.value|number_format,
        "min": min.value|number_format,
        "step": step|number_format,
        "id": min.inputId,
        "value": value[0]|number_format,
        "data-unit": unitLabel,
      }) }} />
      <input {{ macros.addAttributes({
        "class": "bf-input-slider__input bf-input-slider__input__max",
        "type": "range",
        "max": max.value|number_format,
        "min": min.value|number_format,
        "step": step|number_format,
        "id": max.inputId,
        "value": value[1]|number_format,
        "data-unit": unitLabel,
      }) }} />
    {% else %}
      <input {{ macros.addAttributes({
        "class": "bf-input-slider__input",
        "type": "range",
        "max": max.value|number_format,
        "min": min.value|number_format,
        "step": step|number_format,
        "id": min.inputId|default(max.inputId),
        "value": value|number_format,
        "data-unit": unitLabel,
      }) }} />
    {% endif %}
  </div>

  {% if hasLegend or hasDescription %}
    <div class="bf-input-slider__legend mx-2 mt-2">
      {% if hasMinLegend or hasMinDescription %}
        <p class="bf-input-slider__legend__min">
          {{ min.legend|default("") }}
          {% if hasMinDescription %}
            <strong>{{ min.description }}</strong>
          {% endif %}
        </p>
      {% endif %}

      {% if hasMaxLegend or hasMaxDescription %}
        <p class="bf-input-slider__legend__max">
          {{ max.legend|default("") }}
          {% if hasMaxDescription %}
            <strong>{{ max.description }}</strong>
          {% endif %}
        </p>
      {% endif %}
    </div>
  {% endif %}
</div>
